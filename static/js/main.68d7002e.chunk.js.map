{"version":3,"sources":["components/TableCell/TableCell.jsx","App.jsx","api/api.js","index.jsx"],"names":["TableCell","cell","row","onCreatePopup","useState","selected","setSelected","console","log","className","classNames","onMouseOver","changeCellColor","React","memo","App","fields","setFields","field","setField","start","setStart","popups","setPopups","useEffect","fetch","then","response","json","data","createPopup","useCallback","controller","cellPosition","current","filter","element","value","onChange","event","target","disabled","Object","keys","map","key","type","onClick","fieldSize","arr","i","push","item","index","createField","popup","uuidv4","ReactDOM","render","document","getElementById"],"mappings":"yOAIMA,EAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,cAC9B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAC,QAAQC,IAAI,uBAcZ,OACE,mCACE,oBAEEC,UAAWC,IACT,cAAe,CAAE,wBAAyBL,IAE5CM,YAAa,kBAnBK,WACtB,GAAIN,EAIF,OAHAC,GAAY,QACZH,EAAcD,EAAKD,GAAM,GAK3BK,GAAY,GACZH,EAAcD,EAAKD,GAWbW,KALGX,MAkBEY,MAAMC,KAAKd,GCuFXe,G,MA3HH,WACV,MAA4BX,mBAAS,IAArC,mBAAOY,EAAP,KAAeC,EAAf,KACA,EAA0Bb,mBAAS,IAAnC,mBAAOc,EAAP,KAAcC,EAAd,KACA,EAA0Bf,oBAAS,GAAnC,mBAAOgB,EAAP,KAAcC,EAAd,KACA,EAA4BjB,mBAAS,IAArC,mBAAOkB,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WCTHC,MAHG,oCAIPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDUxBF,MAAK,SAAAG,GAAI,OAAIZ,EAAUY,QACzB,IAEH,IAAMC,EAAcC,uBAAY,SAAC7B,EAAKD,GAA6B,IAAvB+B,IAAsB,yDAChE,GAAIA,EAAJ,CACE,IAAMC,EAAe,CAAC/B,EAAKD,GAE3BsB,GAAU,SAACW,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAoBD,YAMxBV,GAAU,SAACW,GACT,OAAOA,EAAQC,QAAO,SAAAC,GAAO,OAC3BA,EAAQ,KAAOlC,GAAOkC,EAAQ,KAAOnC,UAGxC,IA8BH,OACE,sBAAKQ,UAAU,MAAf,UACE,gCACE,sBAAKA,UAAU,cAAf,UACE,yBACE4B,MAAOnB,EACPoB,SAAU,SAACC,GACTpB,EAASoB,EAAMC,OAAOH,OACtBhB,GAAS,IAEXZ,UAAU,gBANZ,UAQE,wBACE4B,MAAM,GACNI,UAAQ,EAFV,uBAMCC,OAAOC,KAAK3B,GAAQ4B,KAAI,SAAAC,GAAG,OAC1B,wBAEER,MAAOrB,EAAO6B,GAAK3B,MAFrB,SAIG2B,GAHIA,SASX,wBACEC,KAAK,SACLC,QAAS,kBACP1B,GAAS,IAEXZ,UAAU,cALZ,sBAWDS,GAASE,GACR,uBAAOX,UAAU,QAAjB,SACE,uBAAOA,UAAU,cAAjB,SAtEU,SAACuC,GAGnB,IAFA,IAAMC,EAAM,GAEHC,EAAI,EAAGA,GAAKF,EAAWE,IAC9BD,EAAIE,KAAKD,GAqBX,OAlBcD,EAAIL,KAAI,SAACQ,EAAMC,GAC3B,OACE,oBAEE5C,UAAU,aAFZ,SAIGwC,EAAIL,KAAI,SAAAR,GAAO,OACd,cAAC,EAAD,CAEEnC,KAAMmC,EACNlC,IAAKmD,EAAQ,EACblD,cAAe2B,GAHVM,OALJgB,MA6DAE,CAAYpC,UAMpBA,GAASE,GACR,sBAAKX,UAAU,SAAf,UACE,+CACCa,EAAOsB,KAAI,SAAAW,GAAK,OACf,qBAEE9C,UAAU,eAFZ,uBAIU8C,EAAM,GAJhB,gBAI0BA,EAAM,KAHzBC,0B,MEhHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.68d7002e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TableCell = ({ cell, row, onCreatePopup }) => {\n  const [selected, setSelected] = useState(false);\n\n  console.log('rendering tablecell');\n\n  const changeCellColor = () => {\n    if (selected) {\n      setSelected(false);\n      onCreatePopup(row, cell, false);\n\n      return;\n    }\n\n    setSelected(true);\n    onCreatePopup(row, cell);\n  };\n\n  return (\n    <>\n      <td\n        key={cell}\n        className={classNames(\n          'field__cell', { 'field__cell--selected': selected },\n        )}\n        onMouseOver={() => (\n          changeCellColor()\n        )}\n      />\n    </>\n  );\n};\n\nTableCell.propTypes = {\n  cell: PropTypes.number.isRequired,\n  row: PropTypes.number.isRequired,\n  onCreatePopup: PropTypes.func.isRequired,\n};\n\nexport default React.memo(TableCell);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport TableCell from './components/TableCell/TableCell';\nimport { getData } from './api/api';\nimport './App.scss';\n\nconst App = () => {\n  const [fields, setFields] = useState({});\n  const [field, setField] = useState('');\n  const [start, setStart] = useState(false);\n  const [popups, setPopups] = useState([]);\n\n  useEffect(() => {\n    getData()\n      .then(data => setFields(data));\n  }, []);\n\n  const createPopup = useCallback((row, cell, controller = true) => {\n    if (controller) {\n      const cellPosition = [row, cell];\n\n      setPopups((current) => {\n        return [...current, cellPosition];\n      });\n\n      return;\n    }\n\n    setPopups((current) => {\n      return current.filter(element => (\n        element[0] !== row || element[1] !== cell\n      ));\n    });\n  }, []);\n\n  const createField = (fieldSize) => {\n    const arr = [];\n\n    for (let i = 1; i <= fieldSize; i++) {\n      arr.push(i);\n    }\n\n    const table = arr.map((item, index) => {\n      return (\n        <tr\n          key={item}\n          className=\"field__row\"\n        >\n          {arr.map(element => (\n            <TableCell\n              key={element}\n              cell={element}\n              row={index + 1}\n              onCreatePopup={createPopup}\n            />\n          ))}\n        </tr>\n      );\n    });\n\n    return table;\n  };\n\n  return (\n    <div className=\"app\">\n      <div>\n        <div className=\"app__header\">\n          <select\n            value={field}\n            onChange={(event) => {\n              setField(event.target.value);\n              setStart(false);\n            }}\n            className=\"app__selector\"\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Pick mode\n            </option>\n            {Object.keys(fields).map(key => (\n              <option\n                key={key}\n                value={fields[key].field}\n              >\n                {key}\n              </option>\n            ))}\n\n          </select>\n\n          <button\n            type=\"button\"\n            onClick={() => (\n              setStart(true)\n            )}\n            className=\"app__button\"\n          >\n            START\n          </button>\n        </div>\n\n        {field && start && (\n          <table className=\"field\">\n            <tbody className=\"field__body\">\n              {createField(field)}\n            </tbody>\n          </table>\n        )}\n      </div>\n\n      {field && start && (\n        <div className=\"popups\">\n          <h1>Hover squares</h1>\n          {popups.map(popup => (\n            <div\n              key={uuidv4()}\n              className=\"popups__item\"\n            >\n              {`row ${popup[0]} col ${popup[1]}`}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const url = 'https://demo1030918.mockable.io/';\n\nexport const getData = () => {\n  return fetch(url)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './normalize.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}